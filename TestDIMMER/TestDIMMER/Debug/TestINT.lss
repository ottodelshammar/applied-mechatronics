
TestINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000c8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000015c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000038  00000000  00000000  000008ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000fa  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000a3  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000117  00000000  00000000  00000ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000064  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000a2  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000003c  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000028  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	26 c0       	rjmp	.+76     	; 0x56 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	35 d0       	rcall	.+106    	; 0xbc <main>
  52:	38 c0       	rjmp	.+112    	; 0xc4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_4>:
int init_LEDs(void);
int init_INTs(void);

uint8_t pin27;

ISR (PCINT1_vect){ //ISR_BLOCK <<--- if needed?
  56:	1f 92       	push	r1
  58:	0f 92       	push	r0
  5a:	0f b6       	in	r0, 0x3f	; 63
  5c:	0f 92       	push	r0
  5e:	11 24       	eor	r1, r1
  60:	8f 93       	push	r24
	pin27 = PINC & (1<<PINC4);
  62:	86 b1       	in	r24, 0x06	; 6
	pin27 = pin27>>PC4;
  64:	82 95       	swap	r24
  66:	81 70       	andi	r24, 0x01	; 1
  68:	80 93 00 01 	sts	0x0100, r24
	if(pin27 == 1){
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	29 f4       	brne	.+10     	; 0x7a <__vector_4+0x24>
		PORTB |= (1<<PB6)|(1<<PB7);
  70:	85 b1       	in	r24, 0x05	; 5
  72:	80 6c       	ori	r24, 0xC0	; 192
  74:	85 b9       	out	0x05, r24	; 5
		PORTD |= (1<<PD5);
  76:	5d 9a       	sbi	0x0b, 5	; 11
  78:	04 c0       	rjmp	.+8      	; 0x82 <__vector_4+0x2c>
	}else{
		PORTB &= ~((1<<PB6)|(1<<PB7));
  7a:	85 b1       	in	r24, 0x05	; 5
  7c:	8f 73       	andi	r24, 0x3F	; 63
  7e:	85 b9       	out	0x05, r24	; 5
		PORTD &= ~(1<<PD5);
  80:	5d 98       	cbi	0x0b, 5	; 11
// 		PORTB |= (1<<PB6)|(1<<PB7);
// 		PORTD |= (1<<PD5);
// 		n = 0;
// 	}
	
}
  82:	8f 91       	pop	r24
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <init_LEDs>:
	
}

int init_LEDs(void)
{
	DDRD |= 0b00100000;
  8e:	55 9a       	sbi	0x0a, 5	; 10
	DDRB |= 0b11000000;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	80 6c       	ori	r24, 0xC0	; 192
  94:	84 b9       	out	0x04, r24	; 4
	
	return 1;
}
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <init_INTs>:

int init_INTs(void){
	DDRC &= ~(0b00011000);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	87 7e       	andi	r24, 0xE7	; 231
  a0:	87 b9       	out	0x07, r24	; 7
	PCMSK1 |= (1<<PCINT11)|(1<<PCINT12);
  a2:	ec e6       	ldi	r30, 0x6C	; 108
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 61       	ori	r24, 0x18	; 24
  aa:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
  ac:	e8 e6       	ldi	r30, 0x68	; 104
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	80 83       	st	Z, r24
	
	return 1;
}
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	08 95       	ret

000000bc <main>:
}
//int set_LED(int pos, int val);

int main(void)
{
	init_LEDs();
  bc:	e8 df       	rcall	.-48     	; 0x8e <init_LEDs>
	init_INTs();
  be:	ee df       	rcall	.-36     	; 0x9c <init_INTs>
	sei();
  c0:	78 94       	sei
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x6>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
