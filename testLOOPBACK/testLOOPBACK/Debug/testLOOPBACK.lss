
testLOOPBACK.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000162  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  0080012a  0080012a  00000220  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000983  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000048  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002cc  00000000  00000000  000009fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001e2  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000205  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a4  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000160  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000011a  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000038  00000000  00000000  000013ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	71 c0       	rjmp	.+226    	; 0x10c <__vector_20>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e6       	ldi	r30, 0x62	; 98
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	aa 32       	cpi	r26, 0x2A	; 42
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	aa e2       	ldi	r26, 0x2A	; 42
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 3a       	cpi	r26, 0xAD	; 173
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	41 d0       	rcall	.+130    	; 0xea <main>
  68:	7a c0       	rjmp	.+244    	; 0x15e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <initUSART>:
// 		transmit_USART(data);
	}
}

int initUSART(unsigned int ubrr){
	UBRR0H = (unsigned int) (ubrr>>8); //Set baudrate
  6c:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  70:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<TXCIE0); //Enable reciever AND transmitter 
  74:	88 e5       	ldi	r24, 0x58	; 88
  76:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Set frame format: 8data
  7a:	86 e0       	ldi	r24, 0x06	; 6
  7c:	80 93 c2 00 	sts	0x00C2, r24
	return 1;
}
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <appendSerial>:
	UDR0 = data; //Put data into buffer, sends the data
}


void appendSerial(char c){
	serialBuffer[serialWritePos] = c;
  86:	90 91 2a 01 	lds	r25, 0x012A
  8a:	e9 2f       	mov	r30, r25
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	e3 5d       	subi	r30, 0xD3	; 211
  90:	fe 4f       	sbci	r31, 0xFE	; 254
  92:	80 83       	st	Z, r24
	serialWritePos++;
  94:	9f 5f       	subi	r25, 0xFF	; 255
	
	if(serialWritePos >= horst){
  96:	1a f0       	brmi	.+6      	; 0x9e <appendSerial+0x18>
}


void appendSerial(char c){
	serialBuffer[serialWritePos] = c;
	serialWritePos++;
  98:	90 93 2a 01 	sts	0x012A, r25
  9c:	08 95       	ret
	
	if(serialWritePos >= horst){
		serialWritePos = 0;
  9e:	10 92 2a 01 	sts	0x012A, r1
  a2:	08 95       	ret

000000a4 <serialWrite>:
	}
}

void serialWrite(char c[]){
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(c); i++){
  ac:	10 e0       	ldi	r17, 0x00	; 0
  ae:	06 c0       	rjmp	.+12     	; 0xbc <serialWrite+0x18>
		appendSerial(c[i]);
  b0:	fe 01       	movw	r30, r28
  b2:	e8 0f       	add	r30, r24
  b4:	f9 1f       	adc	r31, r25
  b6:	80 81       	ld	r24, Z
  b8:	e6 df       	rcall	.-52     	; 0x86 <appendSerial>
		serialWritePos = 0;
	}
}

void serialWrite(char c[]){
	for(uint8_t i = 0; i < strlen(c); i++){
  ba:	1f 5f       	subi	r17, 0xFF	; 255
  bc:	81 2f       	mov	r24, r17
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	ec 2f       	mov	r30, r28
  c2:	fd 2f       	mov	r31, r29
  c4:	df 01       	movw	r26, r30
  c6:	0d 90       	ld	r0, X+
  c8:	00 20       	and	r0, r0
  ca:	e9 f7       	brne	.-6      	; 0xc6 <serialWrite+0x22>
  cc:	11 97       	sbiw	r26, 0x01	; 1
  ce:	ae 1b       	sub	r26, r30
  d0:	bf 0b       	sbc	r27, r31
  d2:	8a 17       	cp	r24, r26
  d4:	9b 07       	cpc	r25, r27
  d6:	60 f3       	brcs	.-40     	; 0xb0 <serialWrite+0xc>
		appendSerial(c[i]);
	}
	
	if(UCSR0A & (1 << UDRE0)){
  d8:	80 91 c0 00 	lds	r24, 0x00C0
  dc:	85 fd       	sbrc	r24, 5
		UDR0 = 0;
  de:	10 92 c6 00 	sts	0x00C6, r1
	}
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <main>:
uint8_t serialWritePos = 0;

int main(void)
{
	
	initUSART(BRC);
  ea:	89 e1       	ldi	r24, 0x19	; 25
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	be df       	rcall	.-132    	; 0x6c <initUSART>
	sei();
  f0:	78 94       	sei
	
    while(1)
    {	
		
		serialWrite("Med en enkel tullipan på bemärkelsedan \n\r");
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	d6 df       	rcall	.-84     	; 0xa4 <serialWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f e3       	ldi	r18, 0x3F	; 63
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x14>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x1e>
 108:	00 00       	nop
 10a:	f3 cf       	rjmp	.-26     	; 0xf2 <main+0x8>

0000010c <__vector_20>:
	if(UCSR0A & (1 << UDRE0)){
		UDR0 = 0;
	}
}

ISR(USART_TX_vect){
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	if(serialReadPos != serialWritePos){
 11e:	e0 91 2b 01 	lds	r30, 0x012B
 122:	80 91 2a 01 	lds	r24, 0x012A
 126:	e8 17       	cp	r30, r24
 128:	89 f0       	breq	.+34     	; 0x14c <__vector_20+0x40>
		UDR0 = serialBuffer[serialReadPos];
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e3 5d       	subi	r30, 0xD3	; 211
 12e:	fe 4f       	sbci	r31, 0xFE	; 254
 130:	80 81       	ld	r24, Z
 132:	80 93 c6 00 	sts	0x00C6, r24
		serialReadPos++;
 136:	90 91 2b 01 	lds	r25, 0x012B
 13a:	89 2f       	mov	r24, r25
 13c:	8f 5f       	subi	r24, 0xFF	; 255
		if(serialReadPos >= horst){
 13e:	1a f0       	brmi	.+6      	; 0x146 <__vector_20+0x3a>
}

ISR(USART_TX_vect){
	if(serialReadPos != serialWritePos){
		UDR0 = serialBuffer[serialReadPos];
		serialReadPos++;
 140:	80 93 2b 01 	sts	0x012B, r24
 144:	03 c0       	rjmp	.+6      	; 0x14c <__vector_20+0x40>
		if(serialReadPos >= horst){
			serialReadPos++;
 146:	9e 5f       	subi	r25, 0xFE	; 254
 148:	90 93 2b 01 	sts	0x012B, r25
		}

	}
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
