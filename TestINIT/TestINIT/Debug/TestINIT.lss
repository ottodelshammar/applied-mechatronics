
TestINIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000a0  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000114  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000000e4  00000000  00000000  000008de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000090  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010d  00000000  00000000  00000a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000096  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__vector_4>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <__bad_interrupt>
  20:	11 c0       	rjmp	.+34     	; 0x44 <__bad_interrupt>
  22:	10 c0       	rjmp	.+32     	; 0x44 <__bad_interrupt>
  24:	0f c0       	rjmp	.+30     	; 0x44 <__bad_interrupt>
  26:	0e c0       	rjmp	.+28     	; 0x44 <__bad_interrupt>
  28:	0d c0       	rjmp	.+26     	; 0x44 <__bad_interrupt>
  2a:	0c c0       	rjmp	.+24     	; 0x44 <__bad_interrupt>
  2c:	0b c0       	rjmp	.+22     	; 0x44 <__bad_interrupt>
  2e:	0a c0       	rjmp	.+20     	; 0x44 <__bad_interrupt>
  30:	09 c0       	rjmp	.+18     	; 0x44 <__bad_interrupt>
  32:	08 c0       	rjmp	.+16     	; 0x44 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	29 d0       	rcall	.+82     	; 0x94 <main>
  42:	2c c0       	rjmp	.+88     	; 0x9c <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <__vector_4>:
//Function declaration
int init_LEDs(void);
int init_INTs(void);


ISR (PCINT1_vect, ISR_BLOCK){
  46:	1f 92       	push	r1
  48:	0f 92       	push	r0
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	0f 92       	push	r0
  4e:	11 24       	eor	r1, r1
  50:	8f 93       	push	r24
					PORTB |= (1<<PB6);
  52:	2e 9a       	sbi	0x05, 6	; 5
					PORTD |= 0b11000000;
  54:	8b b1       	in	r24, 0x0b	; 11
  56:	80 6c       	ori	r24, 0xC0	; 192
  58:	8b b9       	out	0x0b, r24	; 11
					
}
  5a:	8f 91       	pop	r24
  5c:	0f 90       	pop	r0
  5e:	0f be       	out	0x3f, r0	; 63
  60:	0f 90       	pop	r0
  62:	1f 90       	pop	r1
  64:	18 95       	reti

00000066 <init_LEDs>:
	
}

int init_LEDs(void)
{
		DDRD |= 0b00100000;
  66:	55 9a       	sbi	0x0a, 5	; 10
		DDRB |= 0b11000000;
  68:	84 b1       	in	r24, 0x04	; 4
  6a:	80 6c       	ori	r24, 0xC0	; 192
  6c:	84 b9       	out	0x04, r24	; 4
		
		return 1;
}
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	08 95       	ret

00000074 <init_INTs>:

int init_INTs(void){
	DDRC &= ~(0b00011000);
  74:	87 b1       	in	r24, 0x07	; 7
  76:	87 7e       	andi	r24, 0xE7	; 231
  78:	87 b9       	out	0x07, r24	; 7
	PCMSK1 |= (1<<PCINT11)|(1<<PCINT12);
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 81       	ld	r24, Z
  80:	88 61       	ori	r24, 0x18	; 24
  82:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1);
  84:	e8 e6       	ldi	r30, 0x68	; 104
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	80 83       	st	Z, r24
	
	return 1;
}
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret

00000094 <main>:
}
//int set_LED(int pos, int val);

int main(void)
{
	init_LEDs();
  94:	e8 df       	rcall	.-48     	; 0x66 <init_LEDs>
	init_INTs();
  96:	ee df       	rcall	.-36     	; 0x74 <init_INTs>
	sei();
  98:	78 94       	sei
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x6>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
