
TestLOOPBACK2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000da  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000016e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000014e  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000f2  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000120  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000ac  00000000  00000000  00000ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000c1  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000f1  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	32 c0       	rjmp	.+100    	; 0x8a <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a1 30       	cpi	r26, 0x01	; 1
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	0f d0       	rcall	.+30     	; 0x70 <main>
  52:	41 c0       	rjmp	.+130    	; 0xd6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <initUSART>:
		
	}
}

int initUSART(unsigned int ubrr){
	UBRR0H = (unsigned int) (ubrr>>8); //Set baudrate
  56:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  5a:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //Enable reciever AND transmitter // RXCIE enables interrupts on the RXC flag
  5e:	88 e9       	ldi	r24, 0x98	; 152
  60:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00) | (1<<USBS0); // Set frame format: (UCSZ01)8data // (USBS0 = 1 == 2 stop bits)
  64:	8e e0       	ldi	r24, 0x0E	; 14
  66:	80 93 c2 00 	sts	0x00C2, r24
	return 1;
}
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	08 95       	ret

00000070 <main>:
unsigned char data;

int main(void)
{
	
	initUSART(BRC);
  70:	89 e1       	ldi	r24, 0x19	; 25
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	f0 df       	rcall	.-32     	; 0x56 <initUSART>
	sei();
  76:	78 94       	sei
  78:	ff cf       	rjmp	.-2      	; 0x78 <main+0x8>

0000007a <transmitUSART>:
	return 1;
}

void transmitUSART(unsigned char data){

	UDR0 = data; //Put data into buffer, sends the data
  7a:	80 93 c6 00 	sts	0x00C6, r24
  7e:	08 95       	ret

00000080 <recieveUSART>:
}

unsigned char recieveUSART(){
	data = UDR0;
  80:	80 91 c6 00 	lds	r24, 0x00C6
  84:	80 93 00 01 	sts	0x0100, r24
	return data;
}
  88:	08 95       	ret

0000008a <__vector_18>:

ISR(USART_RX_vect){
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	3f 93       	push	r19
  98:	4f 93       	push	r20
  9a:	5f 93       	push	r21
  9c:	6f 93       	push	r22
  9e:	7f 93       	push	r23
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	af 93       	push	r26
  a6:	bf 93       	push	r27
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
	data = recieveUSART();
  ac:	e9 df       	rcall	.-46     	; 0x80 <recieveUSART>
  ae:	80 93 00 01 	sts	0x0100, r24
	transmitUSART(data);
  b2:	e3 df       	rcall	.-58     	; 0x7a <transmitUSART>
}
  b4:	ff 91       	pop	r31
  b6:	ef 91       	pop	r30
  b8:	bf 91       	pop	r27
  ba:	af 91       	pop	r26
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	7f 91       	pop	r23
  c2:	6f 91       	pop	r22
  c4:	5f 91       	pop	r21
  c6:	4f 91       	pop	r20
  c8:	3f 91       	pop	r19
  ca:	2f 91       	pop	r18
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
