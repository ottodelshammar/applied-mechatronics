
TestSPEEDMEASUREMENT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000448  000004dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000448  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  000004dc  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000183  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000fb3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000051a  00000000  00000000  00001062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000250  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002ab  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000168  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001cf  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002ff  00000000  00000000  00001daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  000020ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	87 c0       	rjmp	.+270    	; 0x118 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 31       	cpi	r26, 0x1E	; 30
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	3b d1       	rcall	.+630    	; 0x2c8 <main>
  52:	f8 c1       	rjmp	.+1008   	; 0x444 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_LEDs>:
}
//int set_LED(int pos, int val)

void init_LEDs()
{
	DDRD |= 1 << PD5;
  56:	55 9a       	sbi	0x0a, 5	; 10
	DDRB |= (1<<PB6) | (1<<PB7);
  58:	84 b1       	in	r24, 0x04	; 4
  5a:	80 6c       	ori	r24, 0xC0	; 192
  5c:	84 b9       	out	0x04, r24	; 4
  5e:	08 95       	ret

00000060 <init_INTs>:
}

void init_INTs(){
	DDRC &= ~(1 << DDC3); //| 1 << DDC4); // Set as inputs
  60:	3b 98       	cbi	0x07, 3	; 7
	PCMSK1 |= (1<<PCINT11);//|(1<<PCINT12); // Set interrupt pins
  62:	ec e6       	ldi	r30, 0x6C	; 108
  64:	f0 e0       	ldi	r31, 0x00	; 0
  66:	80 81       	ld	r24, Z
  68:	88 60       	ori	r24, 0x08	; 8
  6a:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1); //Enable interrupts
  6c:	e8 e6       	ldi	r30, 0x68	; 104
  6e:	f0 e0       	ldi	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	82 60       	ori	r24, 0x02	; 2
  74:	80 83       	st	Z, r24
	OCR0A = 253; //Set permanent compare value 50PWM = 120 rpm
  76:	8d ef       	ldi	r24, 0xFD	; 253
  78:	87 bd       	out	0x27, r24	; 39
	constant = 78125*2;
  7a:	8a e5       	ldi	r24, 0x5A	; 90
  7c:	92 e6       	ldi	r25, 0x62	; 98
  7e:	a2 e0       	ldi	r26, 0x02	; 2
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	80 93 0c 01 	sts	0x010C, r24
  86:	90 93 0d 01 	sts	0x010D, r25
  8a:	a0 93 0e 01 	sts	0x010E, r26
  8e:	b0 93 0f 01 	sts	0x010F, r27
	if(OCR0A > 200){
  92:	87 b5       	in	r24, 0x27	; 39
  94:	89 3c       	cpi	r24, 0xC9	; 201
  96:	90 f0       	brcs	.+36     	; 0xbc <init_INTs+0x5c>
		DDRC &= ~(1 << DDC4);
  98:	3c 98       	cbi	0x07, 4	; 7
		PCMSK1 |= (1<<PCINT12); // Initialize additional l interrupt pin
  9a:	ec e6       	ldi	r30, 0x6C	; 108
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	80 83       	st	Z, r24
		constant = 78125;
  a4:	8d e2       	ldi	r24, 0x2D	; 45
  a6:	91 e3       	ldi	r25, 0x31	; 49
  a8:	a1 e0       	ldi	r26, 0x01	; 1
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	80 93 0c 01 	sts	0x010C, r24
  b0:	90 93 0d 01 	sts	0x010D, r25
  b4:	a0 93 0e 01 	sts	0x010E, r26
  b8:	b0 93 0f 01 	sts	0x010F, r27
  bc:	08 95       	ret

000000be <init_TIMER>:
	}
}

void init_TIMER(){
		TCCR1B = (1 << WGM12); // Waveform generation; CTC = Compare to coutner mode// Bettar than normal mode, because can run withous utlizing the eprocessor?
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	80 83       	st	Z, r24
		TCCR1B |= (1<<CS11); // (CS11 = 1) prescaler 8. // Time to overflow // 0.524288 = T/2, f = 1,
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <init_PWM>:
//		TIFR1 |= (1 << TOV1); // TOV1 flag sets when timer overflows
}

void init_PWM()
{
	DDRD |= 1<<DDD6; // Set as output
  ce:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1<<COM0A1) | (1<<WGM01) | (1 << WGM00); // Set fast PWM
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	83 68       	ori	r24, 0x83	; 131
  d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1<<CS00; //Set no prescaling
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	85 bd       	out	0x25, r24	; 37
  dc:	08 95       	ret

000000de <init_USART>:
}

void init_USART(unsigned int ubrr){
	UBRR0H = (unsigned int) (ubrr>>8); //Set baudrate
  de:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  e2:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0); //Enable reciever AND transmitter // RXCIE enables interrupts on the RXC flag
  e6:	88 e9       	ldi	r24, 0x98	; 152
  e8:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // Set frame format: (UCSZ01)8data // (USBS0 = 1 == 2 stop bits)
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	80 93 c2 00 	sts	0x00C2, r24
  f2:	08 95       	ret

000000f4 <TIM16_ReadTCNT1>:
unsigned int TIM16_ReadTCNT1( void )
{
	unsigned char sreg;
	unsigned int i;
	/* Save global interrupt flag */
	sreg = SREG;
  f4:	8f b7       	in	r24, 0x3f	; 63
	/* Disable interrupts */
	cli();
  f6:	f8 94       	cli
	/* Read TCNT1 into i */
	i = TCNT1;
  f8:	20 91 84 00 	lds	r18, 0x0084
  fc:	30 91 85 00 	lds	r19, 0x0085
	/* Restore global interrupt flag */
	SREG = sreg;
 100:	8f bf       	out	0x3f, r24	; 63
	return i;
}
 102:	82 2f       	mov	r24, r18
 104:	93 2f       	mov	r25, r19
 106:	08 95       	ret

00000108 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1( unsigned int i )
{
	unsigned char sreg;
	/* Save global interrupt flag */
	sreg = SREG;
 108:	2f b7       	in	r18, 0x3f	; 63
	/* Disable interrupts */
	cli();
 10a:	f8 94       	cli
	/* Set TCNT1 to i */
	TCNT1 = i;
 10c:	90 93 85 00 	sts	0x0085, r25
 110:	80 93 84 00 	sts	0x0084, r24
	/* Restore global interrupt flag */
	SREG = sreg;
 114:	2f bf       	out	0x3f, r18	; 63
 116:	08 95       	ret

00000118 <__vector_4>:

	}
	
}

ISR (PCINT1_vect){ // PCINT1_vect
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	ticks = TIM16_ReadTCNT1();
 13a:	dc df       	rcall	.-72     	; 0xf4 <TIM16_ReadTCNT1>
 13c:	90 93 09 01 	sts	0x0109, r25
 140:	80 93 08 01 	sts	0x0108, r24
	TIM16_WriteTCNT1(0);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	df df       	rcall	.-66     	; 0x108 <TIM16_WriteTCNT1>
	
	if (ticks < 390 || ticks > 78125 ) //Corresponds to 200 and 1 rpm// high/low pass filter
 14a:	80 91 08 01 	lds	r24, 0x0108
 14e:	90 91 09 01 	lds	r25, 0x0109
 152:	86 38       	cpi	r24, 0x86	; 134
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	92 07       	cpc	r25, r18
 158:	08 f4       	brcc	.+2      	; 0x15c <__vector_4+0x44>
 15a:	3f c0       	rjmp	.+126    	; 0x1da <__vector_4+0xc2>
	{
		return;
	}
	
	avgTicks += ticks;
 15c:	20 91 02 01 	lds	r18, 0x0102
 160:	30 91 03 01 	lds	r19, 0x0103
 164:	28 0f       	add	r18, r24
 166:	39 1f       	adc	r19, r25
 168:	30 93 03 01 	sts	0x0103, r19
 16c:	20 93 02 01 	sts	0x0102, r18
	
	n++;
 170:	40 91 06 01 	lds	r20, 0x0106
 174:	50 91 07 01 	lds	r21, 0x0107
 178:	4f 5f       	subi	r20, 0xFF	; 255
 17a:	5f 4f       	sbci	r21, 0xFF	; 255
 17c:	50 93 07 01 	sts	0x0107, r21
 180:	40 93 06 01 	sts	0x0106, r20
	
	if(n == 3){
 184:	43 30       	cpi	r20, 0x03	; 3
 186:	51 05       	cpc	r21, r1
 188:	f1 f4       	brne	.+60     	; 0x1c6 <__vector_4+0xae>
	ticksArray[pos] = avgTicks/n;
 18a:	40 91 04 01 	lds	r20, 0x0104
 18e:	50 91 05 01 	lds	r21, 0x0105
 192:	fa 01       	movw	r30, r20
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	ec 5e       	subi	r30, 0xEC	; 236
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	ab ea       	ldi	r26, 0xAB	; 171
 19e:	ba ea       	ldi	r27, 0xAA	; 170
 1a0:	02 d1       	rcall	.+516    	; 0x3a6 <__umulhisi3>
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	91 83       	std	Z+1, r25	; 0x01
 1a8:	80 83       	st	Z, r24
	avgTicks = 0;
 1aa:	10 92 03 01 	sts	0x0103, r1
 1ae:	10 92 02 01 	sts	0x0102, r1
	n = 0;
 1b2:	10 92 07 01 	sts	0x0107, r1
 1b6:	10 92 06 01 	sts	0x0106, r1
	pos++;
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	50 93 05 01 	sts	0x0105, r21
 1c2:	40 93 04 01 	sts	0x0104, r20
	}
	
	if(pos == ticksArraySize){ // Reset position count
 1c6:	80 91 04 01 	lds	r24, 0x0104
 1ca:	90 91 05 01 	lds	r25, 0x0105
 1ce:	05 97       	sbiw	r24, 0x05	; 5
 1d0:	21 f4       	brne	.+8      	; 0x1da <__vector_4+0xc2>
		pos = 0;
 1d2:	10 92 05 01 	sts	0x0105, r1
 1d6:	10 92 04 01 	sts	0x0104, r1
	} //Reset timer
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 1fc:	e0 ec       	ldi	r30, 0xC0	; 192
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	90 81       	ld	r25, Z
 202:	95 ff       	sbrs	r25, 5
 204:	fd cf       	rjmp	.-6      	; 0x200 <USART_Transmit+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 206:	80 93 c6 00 	sts	0x00C6, r24
 20a:	08 95       	ret

0000020c <swap>:
}

void swap(unsigned int *p, unsigned int *q) {
	int t;
	
	t=*p;
 20c:	fc 01       	movw	r30, r24
 20e:	20 81       	ld	r18, Z
 210:	31 81       	ldd	r19, Z+1	; 0x01
	*p=*q;
 212:	fb 01       	movw	r30, r22
 214:	40 81       	ld	r20, Z
 216:	51 81       	ldd	r21, Z+1	; 0x01
 218:	fc 01       	movw	r30, r24
 21a:	51 83       	std	Z+1, r21	; 0x01
 21c:	40 83       	st	Z, r20
	*q=t;
 21e:	fb 01       	movw	r30, r22
 220:	31 83       	std	Z+1, r19	; 0x01
 222:	20 83       	st	Z, r18
 224:	08 95       	ret

00000226 <sort>:
}

void sort(unsigned int a[],unsigned int length) {
 226:	8f 92       	push	r8
 228:	9f 92       	push	r9
 22a:	af 92       	push	r10
 22c:	bf 92       	push	r11
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	8c 01       	movw	r16, r24
	int i,j;

	for(i = 0;i < length-1;i++) {
 240:	6b 01       	movw	r12, r22
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	c8 1a       	sub	r12, r24
 246:	d1 08       	sbc	r13, r1
 248:	39 f5       	brne	.+78     	; 0x298 <sort+0x72>
 24a:	31 c0       	rjmp	.+98     	; 0x2ae <sort+0x88>
		for(j = 0;j < length-i-1;j++) {
 24c:	b5 01       	movw	r22, r10
 24e:	e5 01       	movw	r28, r10
			if(a[j] > a[j+1])
 250:	fb 01       	movw	r30, r22
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	e0 0f       	add	r30, r16
 258:	f1 1f       	adc	r31, r17
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	7f 4f       	sbci	r23, 0xFF	; 255
 25e:	db 01       	movw	r26, r22
 260:	aa 0f       	add	r26, r26
 262:	bb 1f       	adc	r27, r27
 264:	a0 0f       	add	r26, r16
 266:	b1 1f       	adc	r27, r17
 268:	20 81       	ld	r18, Z
 26a:	31 81       	ldd	r19, Z+1	; 0x01
 26c:	8d 91       	ld	r24, X+
 26e:	9c 91       	ld	r25, X
 270:	11 97       	sbiw	r26, 0x01	; 1
 272:	82 17       	cp	r24, r18
 274:	93 07       	cpc	r25, r19
 276:	18 f4       	brcc	.+6      	; 0x27e <sort+0x58>
			swap(&a[j],&a[j+1]);
 278:	bd 01       	movw	r22, r26
 27a:	cf 01       	movw	r24, r30
 27c:	c7 df       	rcall	.-114    	; 0x20c <swap>

void sort(unsigned int a[],unsigned int length) {
	int i,j;

	for(i = 0;i < length-1;i++) {
		for(j = 0;j < length-i-1;j++) {
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	be 01       	movw	r22, r28
 282:	c8 15       	cp	r28, r8
 284:	d9 05       	cpc	r29, r9
 286:	20 f3       	brcs	.-56     	; 0x250 <sort+0x2a>
}

void sort(unsigned int a[],unsigned int length) {
	int i,j;

	for(i = 0;i < length-1;i++) {
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	e8 1a       	sub	r14, r24
 28c:	f8 0a       	sbc	r15, r24
 28e:	c7 01       	movw	r24, r14
 290:	ec 14       	cp	r14, r12
 292:	fd 04       	cpc	r15, r13
 294:	38 f0       	brcs	.+14     	; 0x2a4 <sort+0x7e>
 296:	0b c0       	rjmp	.+22     	; 0x2ae <sort+0x88>
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	e1 2c       	mov	r14, r1
 29e:	f1 2c       	mov	r15, r1
		for(j = 0;j < length-i-1;j++) {
 2a0:	a1 2c       	mov	r10, r1
 2a2:	b1 2c       	mov	r11, r1
 2a4:	46 01       	movw	r8, r12
 2a6:	88 1a       	sub	r8, r24
 2a8:	99 0a       	sbc	r9, r25
 2aa:	81 f6       	brne	.-96     	; 0x24c <sort+0x26>
 2ac:	ed cf       	rjmp	.-38     	; 0x288 <sort+0x62>
			if(a[j] > a[j+1])
			swap(&a[j],&a[j+1]);
		}
	}
}
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	bf 90       	pop	r11
 2c0:	af 90       	pop	r10
 2c2:	9f 90       	pop	r9
 2c4:	8f 90       	pop	r8
 2c6:	08 95       	ret

000002c8 <main>:
unsigned int median = 0;
unsigned long constant;

int main(void)
{
	init_TIMER();
 2c8:	fa de       	rcall	.-524    	; 0xbe <init_TIMER>
	init_LEDs();
 2ca:	c5 de       	rcall	.-630    	; 0x56 <init_LEDs>
	init_USART(BRC);
 2cc:	89 e1       	ldi	r24, 0x19	; 25
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	06 df       	rcall	.-500    	; 0xde <init_USART>
	init_PWM();
 2d2:	fd de       	rcall	.-518    	; 0xce <init_PWM>
	init_INTs();
 2d4:	c5 de       	rcall	.-630    	; 0x60 <init_INTs>
	sei();
 2d6:	78 94       	sei
	
	for(int i = 0; i < charArraySize; i++){
		charArray[i]=0;
 2d8:	10 92 10 01 	sts	0x0110, r1
 2dc:	10 92 11 01 	sts	0x0111, r1
 2e0:	10 92 12 01 	sts	0x0112, r1
 2e4:	10 92 13 01 	sts	0x0113, r1
	
	while(1){

		sort(ticksArray, ticksArraySize);
		
		median = ticksArray[(ticksArraySize + 1)/2 -1];
 2e8:	08 e1       	ldi	r16, 0x18	; 24
 2ea:	11 e0       	ldi	r17, 0x01	; 1
unsigned int pos = 0; 
unsigned int avgTicks = 0; //double
unsigned int median = 0;
unsigned long constant;

int main(void)
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f4 e1       	ldi	r31, 0x14	; 20
 2f0:	ef 2e       	mov	r14, r31
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	ff 2e       	mov	r15, r31
 2f6:	f0 2d       	mov	r31, r0
		charArray[i]=0;
	}
	
	while(1){

		sort(ticksArray, ticksArraySize);
 2f8:	65 e0       	ldi	r22, 0x05	; 5
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	84 e1       	ldi	r24, 0x14	; 20
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	92 df       	rcall	.-220    	; 0x226 <sort>
		
		median = ticksArray[(ticksArraySize + 1)/2 -1];
 302:	f8 01       	movw	r30, r16
 304:	20 81       	ld	r18, Z
 306:	31 81       	ldd	r19, Z+1	; 0x01
 308:	30 93 01 01 	sts	0x0101, r19
 30c:	20 93 00 01 	sts	0x0100, r18
	
		rpm = constant/median; //avgTicks; // (60*10^6)/(96*8)= 78125// mulitply median*2 for 1 pin.
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	50 e0       	ldi	r21, 0x00	; 0
 314:	60 91 0c 01 	lds	r22, 0x010C
 318:	70 91 0d 01 	lds	r23, 0x010D
 31c:	80 91 0e 01 	lds	r24, 0x010E
 320:	90 91 0f 01 	lds	r25, 0x010F
 324:	1e d0       	rcall	.+60     	; 0x362 <__udivmodsi4>
 326:	20 93 0a 01 	sts	0x010A, r18
 32a:	30 93 0b 01 	sts	0x010B, r19
		
		itoa((int) rpm, charArray, 10); //Cast integer to string
 32e:	4a e0       	ldi	r20, 0x0A	; 10
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	60 e1       	ldi	r22, 0x10	; 16
 334:	71 e0       	ldi	r23, 0x01	; 1
 336:	82 2f       	mov	r24, r18
 338:	93 2f       	mov	r25, r19
 33a:	41 d0       	rcall	.+130    	; 0x3be <itoa>
 33c:	c0 e1       	ldi	r28, 0x10	; 16
 33e:	d1 e0       	ldi	r29, 0x01	; 1
		for(int i = 0; i < charArraySize; i++){ // Print entire buffer
			USART_Transmit(charArray[i]);
 340:	89 91       	ld	r24, Y+
 342:	5c df       	rcall	.-328    	; 0x1fc <USART_Transmit>
		median = ticksArray[(ticksArraySize + 1)/2 -1];
	
		rpm = constant/median; //avgTicks; // (60*10^6)/(96*8)= 78125// mulitply median*2 for 1 pin.
		
		itoa((int) rpm, charArray, 10); //Cast integer to string
		for(int i = 0; i < charArraySize; i++){ // Print entire buffer
 344:	ce 15       	cp	r28, r14
 346:	df 05       	cpc	r29, r15
 348:	d9 f7       	brne	.-10     	; 0x340 <main+0x78>
			USART_Transmit(charArray[i]);
		}
		
		USART_Transmit(32); //blank space
 34a:	80 e2       	ldi	r24, 0x20	; 32
 34c:	57 df       	rcall	.-338    	; 0x1fc <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	ff e3       	ldi	r31, 0x3F	; 63
 350:	2d e0       	ldi	r18, 0x0D	; 13
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	f1 50       	subi	r31, 0x01	; 1
 356:	20 40       	sbci	r18, 0x00	; 0
 358:	80 40       	sbci	r24, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x8c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x96>
 35e:	00 00       	nop
 360:	cb cf       	rjmp	.-106    	; 0x2f8 <main+0x30>

00000362 <__udivmodsi4>:
 362:	a1 e2       	ldi	r26, 0x21	; 33
 364:	1a 2e       	mov	r1, r26
 366:	aa 1b       	sub	r26, r26
 368:	bb 1b       	sub	r27, r27
 36a:	fd 01       	movw	r30, r26
 36c:	0d c0       	rjmp	.+26     	; 0x388 <__udivmodsi4_ep>

0000036e <__udivmodsi4_loop>:
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	ee 1f       	adc	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	a2 17       	cp	r26, r18
 378:	b3 07       	cpc	r27, r19
 37a:	e4 07       	cpc	r30, r20
 37c:	f5 07       	cpc	r31, r21
 37e:	20 f0       	brcs	.+8      	; 0x388 <__udivmodsi4_ep>
 380:	a2 1b       	sub	r26, r18
 382:	b3 0b       	sbc	r27, r19
 384:	e4 0b       	sbc	r30, r20
 386:	f5 0b       	sbc	r31, r21

00000388 <__udivmodsi4_ep>:
 388:	66 1f       	adc	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	88 1f       	adc	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	1a 94       	dec	r1
 392:	69 f7       	brne	.-38     	; 0x36e <__udivmodsi4_loop>
 394:	60 95       	com	r22
 396:	70 95       	com	r23
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	bd 01       	movw	r22, r26
 3a2:	cf 01       	movw	r24, r30
 3a4:	08 95       	ret

000003a6 <__umulhisi3>:
 3a6:	a2 9f       	mul	r26, r18
 3a8:	b0 01       	movw	r22, r0
 3aa:	b3 9f       	mul	r27, r19
 3ac:	c0 01       	movw	r24, r0
 3ae:	a3 9f       	mul	r26, r19
 3b0:	01 d0       	rcall	.+2      	; 0x3b4 <__umulhisi3+0xe>
 3b2:	b2 9f       	mul	r27, r18
 3b4:	70 0d       	add	r23, r0
 3b6:	81 1d       	adc	r24, r1
 3b8:	11 24       	eor	r1, r1
 3ba:	91 1d       	adc	r25, r1
 3bc:	08 95       	ret

000003be <itoa>:
 3be:	fb 01       	movw	r30, r22
 3c0:	9f 01       	movw	r18, r30
 3c2:	e8 94       	clt
 3c4:	42 30       	cpi	r20, 0x02	; 2
 3c6:	bc f0       	brlt	.+46     	; 0x3f6 <itoa+0x38>
 3c8:	45 32       	cpi	r20, 0x25	; 37
 3ca:	ac f4       	brge	.+42     	; 0x3f6 <itoa+0x38>
 3cc:	4a 30       	cpi	r20, 0x0A	; 10
 3ce:	29 f4       	brne	.+10     	; 0x3da <itoa+0x1c>
 3d0:	97 fb       	bst	r25, 7
 3d2:	1e f4       	brtc	.+6      	; 0x3da <itoa+0x1c>
 3d4:	90 95       	com	r25
 3d6:	81 95       	neg	r24
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	64 2f       	mov	r22, r20
 3dc:	77 27       	eor	r23, r23
 3de:	1e d0       	rcall	.+60     	; 0x41c <__udivmodhi4>
 3e0:	80 5d       	subi	r24, 0xD0	; 208
 3e2:	8a 33       	cpi	r24, 0x3A	; 58
 3e4:	0c f0       	brlt	.+2      	; 0x3e8 <itoa+0x2a>
 3e6:	89 5d       	subi	r24, 0xD9	; 217
 3e8:	81 93       	st	Z+, r24
 3ea:	cb 01       	movw	r24, r22
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	a9 f7       	brne	.-22     	; 0x3da <itoa+0x1c>
 3f0:	16 f4       	brtc	.+4      	; 0x3f6 <itoa+0x38>
 3f2:	5d e2       	ldi	r21, 0x2D	; 45
 3f4:	51 93       	st	Z+, r21
 3f6:	10 82       	st	Z, r1
 3f8:	c9 01       	movw	r24, r18
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <strrev>

000003fc <strrev>:
 3fc:	dc 01       	movw	r26, r24
 3fe:	fc 01       	movw	r30, r24
 400:	67 2f       	mov	r22, r23
 402:	71 91       	ld	r23, Z+
 404:	77 23       	and	r23, r23
 406:	e1 f7       	brne	.-8      	; 0x400 <strrev+0x4>
 408:	32 97       	sbiw	r30, 0x02	; 2
 40a:	04 c0       	rjmp	.+8      	; 0x414 <strrev+0x18>
 40c:	7c 91       	ld	r23, X
 40e:	6d 93       	st	X+, r22
 410:	70 83       	st	Z, r23
 412:	62 91       	ld	r22, -Z
 414:	ae 17       	cp	r26, r30
 416:	bf 07       	cpc	r27, r31
 418:	c8 f3       	brcs	.-14     	; 0x40c <strrev+0x10>
 41a:	08 95       	ret

0000041c <__udivmodhi4>:
 41c:	aa 1b       	sub	r26, r26
 41e:	bb 1b       	sub	r27, r27
 420:	51 e1       	ldi	r21, 0x11	; 17
 422:	07 c0       	rjmp	.+14     	; 0x432 <__udivmodhi4_ep>

00000424 <__udivmodhi4_loop>:
 424:	aa 1f       	adc	r26, r26
 426:	bb 1f       	adc	r27, r27
 428:	a6 17       	cp	r26, r22
 42a:	b7 07       	cpc	r27, r23
 42c:	10 f0       	brcs	.+4      	; 0x432 <__udivmodhi4_ep>
 42e:	a6 1b       	sub	r26, r22
 430:	b7 0b       	sbc	r27, r23

00000432 <__udivmodhi4_ep>:
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	5a 95       	dec	r21
 438:	a9 f7       	brne	.-22     	; 0x424 <__udivmodhi4_loop>
 43a:	80 95       	com	r24
 43c:	90 95       	com	r25
 43e:	bc 01       	movw	r22, r24
 440:	cd 01       	movw	r24, r26
 442:	08 95       	ret

00000444 <_exit>:
 444:	f8 94       	cli

00000446 <__stop_program>:
 446:	ff cf       	rjmp	.-2      	; 0x446 <__stop_program>
